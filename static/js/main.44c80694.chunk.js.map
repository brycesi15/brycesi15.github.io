{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["DATA_URL","BUILDINGS","TRIPS","reduce","s","a","path","timestamps","starts","concat","ss","start","push","vendor","map","t","console","log","ambientLight","AmbientLight","color","intensity","pointLight","PointLight","position","lightingEffect","LightingEffect","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","material","PhongMaterial","ambient","diffuse","shininess","specularColor","effects","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","Map","props","state","time","this","_animate","_animationFrame","window","cancelAnimationFrame","loopLength","animationSpeed","timestamp","Date","now","loopTime","setState","requestAnimationFrame","bind","trips","trailLength","theme","TripsLayer","id","data","getPath","d","getTimestamps","getColor","opacity","widthMinPixels","rounded","currentTime","shadowEnabled","viewState","mapStyle","layers","_renderLayers","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44c80694.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport {PhongMaterial} from '@luma.gl/core';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport TRIPS from './data/trips.json';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoiYnJ5Y2VzaSIsImEiOiJjaWptaHU1djMwMGFsdW9seDgxZnVkNTJ2In0.udaIhAa5fIHQUNIsNKRGGQ\"; // eslint-disable-line\n\n// Source data CSV\nconst DATA_URL = {\n  BUILDINGS:\n    'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n  TRIPS: TRIPS.reduce((s, a) => {\n    const { path, timestamps, starts } = a;\n    return s.concat(starts.reduce((ss, start) => {\n      ss.push({\n        vendor: 0,\n        path,\n        timestamps: timestamps.map(t => t + start)\n      })\n      return ss;\n    }, []))\n  }, [])\n};\n\nconsole.log(DATA_URL.TRIPS);\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [-74.05, 40.7, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = new PhongMaterial({\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n});\n\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 113.552971,\n  latitude: 22.150928,\n  zoom: 13,\n  pitch: 45,\n  bearing: 30\n};\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0\n    };\n  }\n\n  componentDidMount() {\n    this._animate();\n  }\n\n  componentWillUnmount() {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n    }\n  }\n\n  _animate() {\n    const {\n      loopLength = 24 * 60, // unit corresponds to the timestamp in source data\n      animationSpeed = 30 // unit time per second\n    } = this.props;\n    const timestamp = Date.now() / 1000;\n    const loopTime = loopLength / animationSpeed;\n\n    this.setState({\n      time: ((timestamp % loopTime) / loopTime) * loopLength\n    });\n    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n  }\n\n  _renderLayers() {\n    const {\n      trips = DATA_URL.TRIPS,\n      trailLength = 100,\n      theme = DEFAULT_THEME\n    } = this.props;\n\n    return [\n      new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: d => d.path,\n        getTimestamps: d => d.timestamps,\n        getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n        opacity: .5,\n        widthMinPixels: 2,\n        rounded: true,\n        trailLength,\n        currentTime: this.state.time,\n\n        shadowEnabled: false\n      }),\n    ];\n  }\n\n  render() {\n    const {\n      viewState,\n      mapStyle = 'mapbox://styles/mapbox/dark-v9',\n      theme = DEFAULT_THEME\n    } = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        effects={theme.effects}\n        initialViewState={INITIAL_VIEW_STATE}\n        viewState={viewState}\n        controller={true}\n      >\n        <StaticMap\n          reuseMaps\n          mapStyle={mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      </DeckGL>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport Map from \"./Map\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}