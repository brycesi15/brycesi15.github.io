{"version":3,"sources":["Timer.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["Timer","this","props","time","min","Math","trunc","hour","className","Component","TRIPS","TRIP","TRIP_2019","TRIP_2016","map","trip","tidx","reduce","s","a","path","timestamps","starts","concat","ss","start","push","vendor","t","filter","r","idx","forEach","console","log","length","ambientLight","AmbientLight","color","intensity","pointLight","PointLight","position","lightingEffect","LightingEffect","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","material","PhongMaterial","ambient","diffuse","shininess","specularColor","effects","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","Map","state","startTime","Date","now","stage","_animate","_animationFrame","window","cancelAnimationFrame","loopLength","animationSpeed","timestamp","loopTime","setState","requestAnimationFrame","bind","trips","trailLength","theme","TripsLayer","id","data","getPath","d","getTimestamps","getColor","opacity","widthMinPixels","rounded","currentTime","shadowEnabled","viewState","mapStyle","onClick","toStage","style","undefined","layers","_renderLayers","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bff2edd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Timer.css'\n\nexport default class Timer extends Component {\n    render() {\n        const { time=0 } = this.props;\n        const min = Math.trunc(time % 60);\n        const hour = Math.trunc(time / 60);\n\n        return (\n            <div className=\"timer\">{(hour < 10 ? '0' : '') + hour}:{(min < 10 ? '0' : '') + min}</div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport {PhongMaterial} from '@luma.gl/core';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport TRIP from './data/trips.json';\nimport TRIP_2016 from './data/trips_2016.json';\nimport TRIP_2019 from './data/trips_2019.json';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport Timer from './Timer.js';\nimport './Map.css';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoiYnJ5Y2VzaSIsImEiOiJjaWptaHU1djMwMGFsdW9seDgxZnVkNTJ2In0.udaIhAa5fIHQUNIsNKRGGQ\"; // eslint-disable-line\n\n// Source data CSV\nconst TRIPS = [TRIP, TRIP_2019, TRIP_2016].map((trip, tidx) => trip.reduce((s, a) => {\n  const { path, timestamps, starts } = a;\n  return s.concat(starts.reduce((ss, start) => {\n    ss.push({\n      vendor: tidx == 2 ? 1 : 0,\n      path,\n      timestamps: timestamps.map(t => (t + start) % (24 * 60))\n    })\n    return ss;\n  }, []))\n}, []));\n\nTRIPS[2] = TRIPS[2].concat(TRIPS[1]).filter((r, idx) => idx % 3 == 0)\nTRIPS[1] = TRIPS[1].filter((r, idx) => idx % 2 == 0)\n\nTRIPS.forEach(r => console.log(r.length))\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [-74.05, 40.7, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = new PhongMaterial({\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n});\n\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 113.552971,\n  latitude: 22.150928,\n  zoom: 13,\n  pitch: 45,\n  bearing: 30\n};\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: (Date.now() / 1000),\n      time: 0,\n      stage: 0\n    };\n  }\n\n  componentDidMount() {\n    this._animate();\n  }\n\n  componentWillUnmount() {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n    }\n  }\n\n  _animate() {\n    const {\n      loopLength = 24 * 60, // unit corresponds to the timestamp in source data\n      animationSpeed = 120 // unit time per second\n    } = this.props;\n    const timestamp = Date.now() / 1000;\n    const loopTime = loopLength / animationSpeed;\n\n    this.setState({\n      time: (((timestamp - this.state.startTime) % loopTime) / loopTime) * loopLength\n    });\n    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n  }\n\n  _renderLayers() {\n    const {\n      trips = TRIPS[this.state.stage],\n      trailLength = 400,\n      theme = DEFAULT_THEME\n    } = this.props;\n\n    return [\n      new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: d => d.path,\n        getTimestamps: d => d.timestamps,\n        getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n        opacity: .5,\n        widthMinPixels: 3,\n        rounded: true,\n        trailLength,\n        currentTime: this.state.time,\n\n        shadowEnabled: false\n      }),\n    ];\n  }\n\n  toStage(stage) {\n    this.setState({\n      stage\n    });\n  }\n\n  render() {\n    const {\n      viewState,\n      mapStyle = 'mapbox://styles/mapbox/dark-v9',\n      theme = DEFAULT_THEME\n    } = this.props;\n\n    return (\n      <div>\n\n          <div className=\"cplane\">\n            <div \n              onClick={() => this.toStage(1)}\n              style={{color: this.state.stage > 0 ? 'rgb(253, 128, 93)' : undefined}}\n            >2019</div>\n            <div onClick={() => this.toStage(2)}\n              style={{color: this.state.stage > 1 ? 'rgb(23, 184, 190)' : undefined}}\n            >2016</div>\n            <div className=\"reset\" onClick={() => this.toStage(0)}>RESET</div>\n          </div>\n        <DeckGL\n          layers={this._renderLayers()}\n          effects={theme.effects}\n          initialViewState={INITIAL_VIEW_STATE}\n          viewState={viewState}\n          controller={true}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          >\n            {this.state.stage > 0 && <div className=\"title\">\n              <div>Macau <br/> Bus Traffic</div>\n            </div>}\n            <Timer time={this.state.time}/>\n          </StaticMap>\n        </DeckGL>\n      </div>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport Map from \"./Map\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}